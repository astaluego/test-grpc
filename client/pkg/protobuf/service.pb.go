// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import customer "github.com/astaluego/test-grpc/client/pkg/protobuf/customer"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Route service

type RouteClient interface {
	New(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error)
	Edit(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error)
	Delete(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error)
	List(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error)
}

type routeClient struct {
	cc *grpc.ClientConn
}

func NewRouteClient(cc *grpc.ClientConn) RouteClient {
	return &routeClient{cc}
}

func (c *routeClient) New(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error) {
	out := new(customer.Response)
	err := grpc.Invoke(ctx, "/Route/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) Edit(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error) {
	out := new(customer.Response)
	err := grpc.Invoke(ctx, "/Route/Edit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) Delete(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error) {
	out := new(customer.Response)
	err := grpc.Invoke(ctx, "/Route/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) List(ctx context.Context, in *customer.Customer, opts ...grpc.CallOption) (*customer.Response, error) {
	out := new(customer.Response)
	err := grpc.Invoke(ctx, "/Route/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Route service

type RouteServer interface {
	New(context.Context, *customer.Customer) (*customer.Response, error)
	Edit(context.Context, *customer.Customer) (*customer.Response, error)
	Delete(context.Context, *customer.Customer) (*customer.Response, error)
	List(context.Context, *customer.Customer) (*customer.Response, error)
}

func RegisterRouteServer(s *grpc.Server, srv RouteServer) {
	s.RegisterService(&_Route_serviceDesc, srv)
}

func _Route_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Route/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).New(ctx, req.(*customer.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Route/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).Edit(ctx, req.(*customer.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Route/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).Delete(ctx, req.(*customer.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Route/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).List(ctx, req.(*customer.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

var _Route_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Route",
	HandlerType: (*RouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Route_New_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Route_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Route_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Route_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x12, 0x4f, 0x2e, 0x2d, 0x2e, 0xc9,
	0xcf, 0x4d, 0x2d, 0xd2, 0x87, 0x31, 0x20, 0x12, 0x46, 0x1d, 0x8c, 0x5c, 0xac, 0x41, 0xf9, 0xa5,
	0x25, 0xa9, 0x42, 0xb2, 0x5c, 0xcc, 0x7e, 0xa9, 0xe5, 0x42, 0x9c, 0x7a, 0xce, 0x50, 0x15, 0x52,
	0x9c, 0x7a, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x42, 0x72, 0x5c, 0x2c,
	0xae, 0x29, 0x99, 0x25, 0x38, 0xe5, 0x15, 0xb8, 0xd8, 0x5c, 0x52, 0x73, 0x52, 0x4b, 0x52, 0xf1,
	0x99, 0xe0, 0x93, 0x59, 0x8c, 0xd3, 0x84, 0x24, 0x36, 0xb0, 0x8b, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x48, 0xa6, 0xed, 0x0b, 0xbb, 0x00, 0x00, 0x00,
}
